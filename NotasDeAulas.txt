Aula 17.10:

Ações Semânticas
D -> T L;
T -> i {T.tipo = T_INT;}
	|s {T.tipo = T_STR;}
	|f {T.tipo = T_FLT;}

L -> L, id
	|id

O reconhecimento de ID faz a inserção de identificadores
na Tabela de Símbolos (guarda id, tipo e posição na memória).

A Tabela de Símbolos pode ser implementada como árvore binária (fácil)
ou como uma tabela Hash (ideal, bem rápida).

Tabela de Símbolos como árvore binária:

struct TabSim
{
	char id[11];
	int tipo;
	struct TabSim *esq, *dir;
}


Exemplo de derivação:

D -> T L; -> T L, id; -> T L, id, id; -> T id, id, id; -> i id, id, id;

Implementar toda a parte de declaração de variáveis e inserção
na tabela de símbolos até dia 31/10.

Está implementado.


Aula 26/10:

Árvores Sintáticas Abstratas

struct AST
{
	int cod; // MUL, DIV, ADD, SUB, CONSTINT, CONSTFLOAT, VAR (define ou enum)
	struct Simbolo *id;
	struct AST *ptr1, *ptr2;
	int constInt;
	float constFloat;
}

Exemplo:

E
	: E '+' T {$$.ptr = criarNo('+', $1.ptr, $3.ptr);}
 	| T {$$.ptr = $1.ptr;}
	;

T
	: T '*' F {$$.ptr = criarNo('*', $1.ptr, $3.ptr);}
	| F {$$.ptr = $1.ptr;}
	;

F
	: '(' E ')' {$$.ptr = $2.ptr;}
	| TCONST {$$.ptr = criarFolha($1.lexval);}
	;

Adicionar "struct AST * ptr;" em struct Atributo.

Fazer função que imprime cada expressão em notação pós-fixada.
Apresentar até dia 07/11.

Assembly até 14/11.

------------------------------
Aula de 09/11/2017

Análise semântica de expressões aritméticas.

Somar um inteiro com float não é possível de maneira direta.
A conversão implícita de um tipo para outro a fim de permitir operações aritméticas entre eles é chamada "coerção".
A conversão explícita de um tipo para outro a fim de permitir operações aritméticas entre eles é chamada "cast".

Fazer toda a coerção e imprimir o assembly Jasmin correspondente.
Para dia 14.11;

------------------------------
Aula de 30/11/2017

Como implementar funções?